#include <EnableInterrupt.h>
#include <Servo.h>

// Infrared
const int pinInfraredLeft = 2;
const int pinInfraredRight = 3;

// Movement variables
Servo servoLeftWheel;
Servo servoRightWheel;
const int pinLeftWheel = 12;
const int pinRightWheel = 13;
const int stopCalibrationLeft = 90;
const int stopCalibrationRight = 167;
const int turnTimeCalibration = 2000;

// Gripperkit
Servo servoGripperkit;
const int pinGripperkit = 10;

// Encoder variables
const int encoderPinLeftWheel = 7;
const int encoderPinRightWheel = 8;
volatile uint16_t encoderCountLeftWheel = 0;
volatile uint16_t encoderCountRightWheel = 0;

// ISR for the amount of turns for the left wheel
void isrCountLeftWheel(){
  encoderCountLeftWheel++;
}

// ISR for the amount of turns for the right wheel
void isrCountRightWheel(){
  encoderCountRightWheel++;
}

// Returns the amount of rotations of the left wheel
int getRotationsLeftWheel(){
  return encoderCountLeftWheel / 8;
}

// Returns the amount of rotations of the right wheel
int getRotationsRightWheel(){
  return encoderCountRightWheel / 8;
}

// Returns the value of the infrared sensors
int getInfraredValue(int pin){
  return analogRead(pin);
}

// Changes the angle of the gripper
void changeGripper(int angle){
  servoGripperkit.write(angle);
}

void pickup(){
  changeGripper(0);
  delay(500);
  changeGripper(180);
  delay(500);
}

// Moves the left wheel
void moveLeftWheel(int angle){
  servoLeftWheel.write(angle);
}

// Moves the right wheel
void moveRightWheel(int angle){
  servoRightWheel.write(angle);
}

// Turns the robot to a certain angle
void turn(float angle){
  int milliseconds = abs((((float)angle / (float) 360)) * turnTimeCalibration);
  moveLeftWheel(180);
  moveRightWheel(180);
  delay(milliseconds); // Remove later
}

// Drives the robot forward
void forward(){
  moveLeftWheel(0);
  moveRightWheel(180);
}

// Drives the robot backwards
void backward(){
  moveLeftWheel(180);
  moveRightWheel(0);
}

// Stops the robot
void standStill(){
  moveLeftWheel(stopCalibrationLeft);
  moveRightWheel(stopCalibrationRight);
  delay(500);
}

// Drives up the ramp
void driveRampUp(){
  int startInfraredValue = getInfraredValue(pinInfraredLeft);
  while((getInfraredValue(pinInfraredLeft) - startInfraredValue) < 50){
    forward();
  }
  standStill();
  pickup();
}

// Drives down the ramp
void driveRampDown(){
  int startInfraredValue = getInfraredValue(pinInfraredLeft);
  Serial.println(startInfraredValue);
  while((startInfraredValue - getInfraredValue(pinInfraredLeft)) < 30){
    Serial.println(startInfraredValue - getInfraredValue(pinInfraredLeft));
    backward();
  }
  standStill();
}

void setup() {
  // Remove
  Serial.begin(9600);

  // Movement
  servoLeftWheel.attach(pinLeftWheel);
  servoRightWheel.attach(pinRightWheel);

  // Gripperkit 
  servoGripperkit.attach(pinGripperkit);

  // Encoders
  pinMode(encoderPinLeftWheel, INPUT_PULLUP);
  enableInterrupt(encoderPinLeftWheel, isrCountLeftWheel, RISING);
  pinMode(encoderPinRightWheel, INPUT_PULLUP);
  enableInterrupt(encoderPinRightWheel, isrCountRightWheel, RISING);
}

void loop() {
//  standStill();
//  delay(1000);
//  pickup();
//  driveRampUp();
//  backward();
//  delay(500);
  driveRampDown();
  standStill();
  delay(500);
//  Serial.println(getInfraredValue(pinInfraredLeft));
}
